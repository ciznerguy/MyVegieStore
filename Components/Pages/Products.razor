@page "/products"
@layout EmptyLayout
@using Microsoft.EntityFrameworkCore
@using MyVegieStore.Model
@using MyVegieStore.ViewModel
@using MyVegieStore.Services

@inject MyVegieStoreContext DbContext

<h3>Products</h3>

@if (products == null)
{
    <p><em>Loading...</em></p>
}
else if (products.Count == 0)
{
    <p>No products found.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Product Name</th>
                <th>Price Per Unit</th>
                <th>Stock Quantity</th>
                <th>Pricing Type</th>
                <th>Image</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    @if (editProductId == product.ProductID)
                    {
                        <td><InputText @bind-Value="product.ProductName" /></td>
                        <td><InputNumber @bind-Value="product.PricePerUnit" /></td>
                        <td><InputNumber @bind-Value="product.StockQuantity" /></td>
                        <td>
                            <InputSelect @bind-Value="product.PricingType">
                                <option value="ByWeight">By Weight</option>
                                <option value="PerUnit">Per Unit</option>
                            </InputSelect>
                        </td>
                        <td><InputText @bind-Value="product.Image" /></td>
                        <td>
                            <button class="btn btn-success" @onclick="() => SaveProduct(product)">Save</button>
                            <button class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                        </td>
                    }
                    else
                    {
                        <td>@product.ProductName</td>
                        <td>₪@product.PricePerUnit</td>
                        <td>@product.StockQuantity</td>
                        <td>@product.PricingType</td>
                        <td>
                            <img src="@product.Image" alt="@product.ProductName" width="100" />
                        </td>
                        <td>
                            <button class="btn btn-primary" @onclick="() => EditProduct(product.ProductID)">Edit</button>
                            <button class="btn btn-danger" @onclick="() => DeleteProduct(product.ProductID)">Delete</button>
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Product> products;
    private int? editProductId;

    protected override async Task OnInitializedAsync()
    {
        products = await DbContext.Products
            .Select(p => new Product
                {
                    ProductID = p.ProductID,
                    ProductName = p.ProductName,
                    PricePerUnit = p.PricePerUnit,
                    StockQuantity = p.StockQuantity,
                    PricingType = p.PricingType,
                    Image = p.Image ?? "/Images/shutterstock_1563541219_lw0wnv.jpg"
                })
            .ToListAsync();
    }

    private void EditProduct(int productId)
    {
        editProductId = productId;
    }

    private void CancelEdit()
    {
        editProductId = null;
    }

    private async Task SaveProduct(Product product)
    {
        // Update the product in the database
        DbContext.Products.Update(product);
        await DbContext.SaveChangesAsync();

        // Clear the edit mode
        editProductId = null;
    }

    private async Task DeleteProduct(int productId)
    {
        var product = await DbContext.Products.FindAsync(productId);
        if (product != null)
        {
            DbContext.Products.Remove(product);
            await DbContext.SaveChangesAsync();
            products.Remove(product); // Remove from the list to update the UI
        }
    }
}
