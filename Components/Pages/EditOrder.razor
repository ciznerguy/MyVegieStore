@page "/edit-order"
@layout EmptyLayout
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.EntityFrameworkCore

@using MyVegieStore.ViewModel
@using MyVegieStore.Model
@using MyVegieStore.Services
@inject MyVegieStoreContext _context
@inject NavigationManager NavigationManager
@inject UserIdService UserIdService

<h3>עריכת הזמנה - @UserIdService.FullName מספר הזמנה @UserIdService.OrderId</h3>

<div style="display: flex;">
    <div style="width: 50%; border: 2px solid #4CAF50; padding: 10px; margin-right: 10px;">
        @if (!showConfirmation)
        {
            <div style="text-align: center; margin-bottom: 20px;">
                <button class="complete-order-button" @onclick="CompleteOrder">שמור שינויים</button>
            </div>
        }

        <h4>מוצרים זמינים</h4>
        <input @bind="searchTerm" @oninput="OnSearchChanged" placeholder="חפש מוצר..." style="margin-bottom: 10px; padding: 5px; width: 100%;" />
        <ul>
            @foreach (var product in filteredProducts)
            {
                <li>
                    <strong>@product.ProductName</strong><br />
                    מחיר ליחידה: @product.PricePerUnit ₪
                    <div>
                        <label>כמות: </label>
                        <InputNumber TValue="double" @bind-Value="selectedQuantity" min="0.1" step="0.1" />
                        <button class="custom-button" @onclick="() => AddProduct(product)">הוסף</button>
                    </div>
                </li>
            }
        </ul>
    </div>

    <div style="width: 50%; border: 2px solid #4CAF50; padding: 10px;">
        <h4>פרטי ההזמנה שלך</h4>
        <ul>
            @if (orderDetailsList.Any())
            {
                @foreach (var item in orderDetailsList)
                {
                    <li>
                        מוצר: @item.Product.ProductName<br />
                        כמות: @item.Quantity<br />
                        מחיר כולל: @item.TotalPrice ₪
                    </li>
                }
            }
            else
            {
                <li>אין מוצרים להזמנה זו.</li>
            }
        </ul>
    </div>
</div>

<div style="position: fixed; right: 20px; top: 20px; background-color: #4CAF50; color: white; padding: 10px; border-radius: 4px;">
    <h4>סך הכל: @TotalOrderAmount.ToString("F2") ₪</h4>
</div>

@if (showConfirmation)
{
    <div class="popup-overlay">
        <div class="popup">
            <p>האם אתה בטוח שברצונך לשמור את השינויים?</p>
            <div style="text-align: center;">
                <button class="btn btn-success" @onclick="ConfirmOrder" style="margin-right: 10px;">אישור</button>
                <button class="btn btn-danger" @onclick="CancelOrder">ביטול</button>
            </div>
        </div>
    </div>
}

<style>
.popup-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
}

.popup {
    background-color: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.3);
    text-align: center;
    width: 300px;
}

.popup p {
    margin-bottom: 20px;
}

.popup button {
    padding: 10px 20px;
    font-size: 16px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
}
</style>

@code {
    private List<Product> products = new List<Product>();
    private List<Product> filteredProducts = new List<Product>();
    private string searchTerm = string.Empty;
    private double selectedQuantity = 1.0;
    private List<OrderDetails> orderDetailsList = new List<OrderDetails>();
    private double TotalOrderAmount = 0.0;
    private bool showConfirmation = false;

    protected override void OnInitialized()
    {
        int orderId = UserIdService.OrderId ?? 0;

        if (orderId > 0)
        {
            orderDetailsList = _context.OrderDetails
                .Where(od => od.OrderID == orderId)
                .Include(od => od.Product)  // Include product details
                .ToList();

            TotalOrderAmount = orderDetailsList.Sum(od => od.TotalPrice);

            // Load available products
            products = _context.Products.ToList();
            filteredProducts = products;
        }
        else
        {
            NavigationManager.NavigateTo("/customer-orders");
        }
    }

    private void AddProduct(Product product)
    {
        if (product == null) throw new ArgumentNullException(nameof(product));

        var orderDetail = new OrderDetails
            {
                OrderID = UserIdService.OrderId ?? 0,
                ProductID = product.ProductID,
                Product = product,
                Quantity = selectedQuantity,
                UnitPrice = product.PricePerUnit,
                TotalPrice = Math.Round(selectedQuantity * product.PricePerUnit, 2)
            };

        orderDetailsList.Add(orderDetail);
        TotalOrderAmount += orderDetail.TotalPrice;
        selectedQuantity = 1.0;
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;

        if (string.IsNullOrEmpty(searchTerm))
        {
            filteredProducts = products;
        }
        else
        {
            filteredProducts = products
                .Where(p => p.ProductName != null && p.ProductName.StartsWith(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        StateHasChanged();
    }

    private void CompleteOrder()
    {
        showConfirmation = true;
    }

    private void ConfirmOrder()
    {
        _context.OrderDetails.UpdateRange(orderDetailsList);
        _context.SaveChanges();
        showConfirmation = false;
        NavigationManager.NavigateTo("/customer-orders");
    }

    private void CancelOrder()
    {
        showConfirmation = false;
    }
}
