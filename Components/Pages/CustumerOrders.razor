@page "/customer-orders"
@layout EmptyLayout

@using MyVegieStore.ViewModel
@using MyVegieStore.Model
@inject OrderViewModel OrderViewModel
@using MyVegieStore.Services
@inject UserIdService UserIdService
@inject NavigationManager NavigationManager
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" rel="stylesheet">

<h3>ההזמנות של @UserIdService.FullName </h3>

@if (orders == null)
{
    <p><em>Loading...</em></p>
}
else if (orders.Count == 0)
{
    <p>No orders found for this customer.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Order ID</th>
                <th>Order Date</th>
                <th>Total Amount</th>
                <th>Delivery Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in orders)
            {
                <tr>
                    <td>@order.OrderID</td>
                    <td>@order.OrderDate.ToString("yyyy-MM-dd")</td>
                    <td>₪@order.TotalAmount</td>
                    <td>@order.DeliveryStatus</td>
                </tr>
            }
            <tr>
                <td colspan="2"><strong>Total</strong></td>
                <td colspan="2"><strong>₪@orders.Sum(o => o.TotalAmount)</strong></td>
            </tr>
        </tbody>
    </table>

    <div class="small-card" @onclick="NavigateToHome">
        <div class="small-card-icon">
            <i class="fas fa-home"></i> <!-- Font Awesome Icon for home -->
        </div>
        <div class="small-card-title">חזרה</div>
    </div>

}

@code {
    // Specify the full namespace to avoid ambiguity
    private List<CustomerOrder> orders;

    private void NavigateToHome()
    {
        NavigationManager.NavigateTo("/");
    }

    protected override async Task OnInitializedAsync()
    {
        var userId = UserIdService.UserId;

        if (userId.HasValue)
        {
            orders = await Task.Run(() => OrderViewModel.GetOrdersForCustomer(userId.Value));
        }
        else
        {
            orders = new List<CustomerOrder>();
        }
    }
}
